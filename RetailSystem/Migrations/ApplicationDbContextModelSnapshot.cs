// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RetailSystem.Data;

namespace RetailSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("LocationId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RetailSystem.Models.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("RetailSystem.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("Name")
                        .HasName("Category_Name");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("RetailSystem.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("AlternatePhoneNumber");

                    b.Property<int>("BusinessId");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(128);

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RetailSystem.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorId");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired();

                    b.Property<int?>("LocationId");

                    b.Property<string>("Note")
                        .HasMaxLength(1024);

                    b.Property<string>("Receiver")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("UpdaterId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("InvoiceNumber")
                        .HasName("Invoice_Number");

                    b.HasIndex("LocationId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("RetailSystem.Models.InvoiceItem", b =>
                {
                    b.Property<int>("InvoiceId");

                    b.Property<int>("ItemId");

                    b.Property<int>("Quantity");

                    b.HasKey("InvoiceId", "ItemId")
                        .HasName("InvoiceItem_Id");

                    b.HasIndex("ItemId");

                    b.ToTable("InvoiceItem");
                });

            modelBuilder.Entity("RetailSystem.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("AlternatePhoto");

                    b.Property<int?>("CategoryId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("Note")
                        .HasMaxLength(1024);

                    b.Property<byte[]>("Photo");

                    b.Property<int?>("SubCategoryId");

                    b.Property<int?>("SupplierId");

                    b.Property<byte>("Tax");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("UnitId");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code")
                        .HasName("Item_Code");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Description")
                        .HasName("Item_Description");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("RetailSystem.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("AlternatePhoneNumber");

                    b.Property<int>("BusinessId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("ContactPerson");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("Status");

                    b.Property<decimal?>("Target")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("TargetType");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code")
                        .HasName("Location_Code");

                    b.HasIndex("BusinessId");

                    b.HasIndex("Name")
                        .HasName("Location_Name");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("RetailSystem.Models.LocationItem", b =>
                {
                    b.Property<int>("LocationId");

                    b.Property<int>("ItemId");

                    b.Property<byte?>("DiscountQuantity");

                    b.Property<int>("FaultQuantity");

                    b.Property<int>("LowQuantity");

                    b.Property<int>("OptimumQuantity");

                    b.Property<byte>("PercentDiscount");

                    b.Property<int>("Quantity");

                    b.Property<int>("Status");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("LocationId", "ItemId")
                        .HasName("LocationItem_Id");

                    b.HasIndex("ItemId");

                    b.ToTable("LocationItems");
                });

            modelBuilder.Entity("RetailSystem.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("Name")
                        .HasName("Manufacturer_Name");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("RetailSystem.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorId");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ExpectedReceiptDate");

                    b.Property<DateTime>("IssueDate");

                    b.Property<int>("LocationId");

                    b.Property<string>("Note")
                        .HasMaxLength(1024);

                    b.Property<string>("OrderNumber");

                    b.Property<int>("OrderStatus");

                    b.Property<int>("PaymentStatus");

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("UpdaterId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrderNumber")
                        .HasName("PurchaseOrder_Number");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("RetailSystem.Models.PurchaseOrderItem", b =>
                {
                    b.Property<int>("PurchaseOrderId");

                    b.Property<int>("ItemId");

                    b.Property<int>("FaultQuantity");

                    b.Property<string>("Note")
                        .HasMaxLength(512);

                    b.Property<int>("Quantity");

                    b.Property<int>("QuantityDelivered");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("PurchaseOrderId", "ItemId")
                        .HasName("PurchaseOrderItem_Id");

                    b.HasIndex("ItemId");

                    b.ToTable("PurchaseItems");
                });

            modelBuilder.Entity("RetailSystem.Models.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CashPaid")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Note")
                        .HasMaxLength(1024);

                    b.Property<string>("Operator");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired();

                    b.Property<int>("SaleId");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptNumber")
                        .HasName("Receipt_Number");

                    b.HasIndex("SaleId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("RetailSystem.Models.ReportGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("TotalCaption")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("ReportGroups");
                });

            modelBuilder.Entity("RetailSystem.Models.ReportItem", b =>
                {
                    b.Property<int>("ReportGroupId");

                    b.Property<int>("ItemId");

                    b.HasKey("ReportGroupId", "ItemId")
                        .HasName("ReportItem_Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ReportItems");
                });

            modelBuilder.Entity("RetailSystem.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorId");

                    b.Property<int>("LocationId");

                    b.Property<string>("Note")
                        .HasMaxLength(512);

                    b.Property<string>("ReferenceNumber")
                        .IsRequired();

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("UpdaterId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ReferenceNumber")
                        .HasName("Sale_ReferenceNumber");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("RetailSystem.Models.SaleItem", b =>
                {
                    b.Property<int>("SaleId");

                    b.Property<int>("ItemId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("SaleId", "ItemId")
                        .HasName("SaleItem_Id");

                    b.HasIndex("ItemId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("RetailSystem.Models.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("RetailSystem.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("AlternatePhoneNumber");

                    b.Property<int>("BusinessId");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(128);

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("Status");

                    b.Property<string>("SupplierCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("Name")
                        .HasName("Supplier_Name");

                    b.HasIndex("SupplierCode")
                        .HasName("Supplier_Code");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("RetailSystem.Models.Supply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorId");

                    b.Property<DateTime?>("ExpectedDeliveryDate");

                    b.Property<int>("LocationId");

                    b.Property<string>("Note")
                        .HasMaxLength(1024);

                    b.Property<int>("OrderStatus");

                    b.Property<int>("PaymentStatus");

                    b.Property<string>("ReferenceNumber");

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("UpdaterId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ReferenceNumber")
                        .HasName("Supply_ReferenceNumber");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Supplies");
                });

            modelBuilder.Entity("RetailSystem.Models.SupplyItem", b =>
                {
                    b.Property<int>("SupplyId");

                    b.Property<int>("ItemId");

                    b.Property<string>("Note")
                        .HasMaxLength(512);

                    b.Property<int>("Quantity");

                    b.Property<int>("QuantityDelivered");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("SupplyId", "ItemId")
                        .HasName("SupplyItem_Id");

                    b.HasIndex("ItemId");

                    b.ToTable("SupplyItems");
                });

            modelBuilder.Entity("RetailSystem.Models.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorId");

                    b.Property<int>("DestinationLocationId");

                    b.Property<string>("Note")
                        .HasMaxLength(512);

                    b.Property<int>("SourceLocationId");

                    b.Property<int>("Status");

                    b.Property<string>("TransferNumber")
                        .IsRequired();

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("UpdaterId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DestinationLocationId");

                    b.HasIndex("SourceLocationId");

                    b.HasIndex("TransferNumber")
                        .HasName("Transfer_Number");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("RetailSystem.Models.TransferItem", b =>
                {
                    b.Property<int>("TransferId");

                    b.Property<int>("ItemId");

                    b.Property<string>("Note")
                        .HasMaxLength(256);

                    b.Property<int>("Quantity");

                    b.HasKey("TransferId", "ItemId")
                        .HasName("TransferItem_Id");

                    b.HasIndex("ItemId");

                    b.ToTable("TransferItems");
                });

            modelBuilder.Entity("RetailSystem.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("Name")
                        .HasName("Unit_Name");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.HasOne("RetailSystem.Models.Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetailSystem.Models.Category", b =>
                {
                    b.HasOne("RetailSystem.Models.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetailSystem.Models.Customer", b =>
                {
                    b.HasOne("RetailSystem.Models.Business", "Business")
                        .WithMany("Customers")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetailSystem.Models.Invoice", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("RetailSystem.Models.Location")
                        .WithMany("Invoices")
                        .HasForeignKey("LocationId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("RetailSystem.Models.InvoiceItem", b =>
                {
                    b.HasOne("RetailSystem.Models.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RetailSystem.Models.Item", "Item")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetailSystem.Models.Item", b =>
                {
                    b.HasOne("RetailSystem.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId");

                    b.HasOne("RetailSystem.Models.Manufacturer", "Manufacturer")
                        .WithMany("Items")
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("RetailSystem.Models.SubCategory", "SubCategory")
                        .WithMany("Items")
                        .HasForeignKey("SubCategoryId");

                    b.HasOne("RetailSystem.Models.Supplier", "Supplier")
                        .WithMany("Items")
                        .HasForeignKey("SupplierId");

                    b.HasOne("RetailSystem.Models.Unit", "Unit")
                        .WithMany("Items")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetailSystem.Models.Location", b =>
                {
                    b.HasOne("RetailSystem.Models.Business", "Business")
                        .WithMany("Locations")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetailSystem.Models.LocationItem", b =>
                {
                    b.HasOne("RetailSystem.Models.Item", "Item")
                        .WithMany("LocationItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RetailSystem.Models.Location", "Location")
                        .WithMany("LocationItems")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetailSystem.Models.Manufacturer", b =>
                {
                    b.HasOne("RetailSystem.Models.Business", "Business")
                        .WithMany("Manufacturers")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetailSystem.Models.PurchaseOrder", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("RetailSystem.Models.Location", "Location")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("RetailSystem.Models.PurchaseOrderItem", b =>
                {
                    b.HasOne("RetailSystem.Models.Item", "Item")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RetailSystem.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetailSystem.Models.Receipt", b =>
                {
                    b.HasOne("RetailSystem.Models.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetailSystem.Models.ReportItem", b =>
                {
                    b.HasOne("RetailSystem.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RetailSystem.Models.ReportGroup", "ReportGroup")
                        .WithMany("ReportItems")
                        .HasForeignKey("ReportGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetailSystem.Models.Sale", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("RetailSystem.Models.Location", "Location")
                        .WithMany("Sales")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("RetailSystem.Models.SaleItem", b =>
                {
                    b.HasOne("RetailSystem.Models.Item", "Item")
                        .WithMany("SaleItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RetailSystem.Models.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetailSystem.Models.SubCategory", b =>
                {
                    b.HasOne("RetailSystem.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetailSystem.Models.Supplier", b =>
                {
                    b.HasOne("RetailSystem.Models.Business", "Business")
                        .WithMany("Suppliers")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetailSystem.Models.Supply", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("RetailSystem.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("RetailSystem.Models.SupplyItem", b =>
                {
                    b.HasOne("RetailSystem.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RetailSystem.Models.Supply", "Supply")
                        .WithMany("SupplyItems")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetailSystem.Models.Transfer", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("RetailSystem.Models.Location", "DestinationLocation")
                        .WithMany("IncomingTransfers")
                        .HasForeignKey("DestinationLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RetailSystem.Models.Location", "SourceLocation")
                        .WithMany("OutgoingTransfers")
                        .HasForeignKey("SourceLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("RetailSystem.Models.TransferItem", b =>
                {
                    b.HasOne("RetailSystem.Models.Item", "Item")
                        .WithMany("TransferItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RetailSystem.Models.Transfer", "Transfer")
                        .WithMany("TransferItems")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetailSystem.Models.Unit", b =>
                {
                    b.HasOne("RetailSystem.Models.Business", "Business")
                        .WithMany("Units")
                        .HasForeignKey("BusinessId");
                });
#pragma warning restore 612, 618
        }
    }
}
